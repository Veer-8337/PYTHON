def roman_to_int(roman):
    # Check if the input is not null
    if not roman:
        raise ValueError("Input cannot be null")

    # Define the Roman numerals and their corresponding values
    roman_numerals = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    }

    # Initialize variables for the result and the previous value
    result = 0
    prev_value = 0

    # Iterate through the reversed Roman numeral string
    for i, numeral in enumerate(reversed(roman)):
        # Check if the current character is a valid Roman numeral
        if numeral not in roman_numerals:
            raise ValueError("Invalid Roman numeral")

        # Get the value of the current Roman numeral
        value = roman_numerals[numeral]

        # Check for invalid Roman numeral sequence
        if i > 0 and value > prev_value:
            raise ValueError("Invalid Roman numeral sequence")

        # Update the result based on the current and previous values
        if value < prev_value:
            result -= value
        else:
            result += value

        # Update the previous value for the next iteration
        prev_value = value

    # Return the final result
    return result

# Example usage:
try:
    # Get user input for a Roman numeral
    roman_input = input("Enter a Roman numeral: ")
    
    # Convert the Roman numeral to an integer
    integer_result = roman_to_int(roman_input.upper())
    
    # Print the result
    print(f"The integer value of {roman_input} is: {integer_result}")
except ValueError as e:
    # Handle errors and print error messages
    print(f"Error: {e}")

# TEST CASES
    
# SINGLE LETTERS
# I, V, X, L, C, D, M should return 1, 5, 10, 50, 100, 500, 1000 respectively
print(roman_to_int("I"))  # Output: 1
print(roman_to_int("V"))  # Output: 5
print(roman_to_int("X"))  # Output: 10
print(roman_to_int("L"))  # Output: 50
print(roman_to_int("C"))  # Output: 100
print(roman_to_int("D"))  # Output: 500
print(roman_to_int("M"))  # Output: 1000

try:
    # MANY LETTERS
    print(roman_to_int("II"))  # Output: 2
except ValueError as e:
    print(f"Error: {e}")


#SUBTRACTIVE NOTATION
try:
    print(roman_to_int("IV"))  # Should output: 4
    print(roman_to_int("IX"))  # Should output: 9
    print(roman_to_int("XL"))  # Should output: 40
    print(roman_to_int("CM"))  # Should output: 900
except ValueError as e:
    print(f"Error: {e}")


# REPETITIVE ROMAN NUMERALS TEST CASE
# Testing various valid Roman numerals with repetition
try:
    # Repeated Roman numerals
    print(roman_to_int("II"))   # Should output: 2
    print(roman_to_int("III"))  # Should output: 3
    print(roman_to_int("XX"))   # Should output: 20
    print(roman_to_int("CCC"))  # Should output: 300
    print(roman_to_int("MMM"))  # Should output: 3000

except ValueError as e:
    print(f"Error: {e}")


# INVALID ROMAN NUMERALS
# Invalid numerals like Z, A, B should raise an error
try:
    print(roman_to_int("Z"))  # Should raise ValueError("Invalid Roman numeral")
except ValueError as e:
    print(f"Error: {e}")


#CHECKING THE NULL INPUT
try:
    # Null input
    print(roman_to_int(""))    # Should output: Error: Input cannot be null
except ValueError as e:
    print(f"Error: {e}")